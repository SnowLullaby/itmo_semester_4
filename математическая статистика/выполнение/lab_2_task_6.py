import numpy as np
import scipy.stats as stats

# Данные выборки
sample = np.array([2.47, 2.98, 2.83, 3.86, 3.22, 2.82, 3.41, 1.96, 2.55, 2.30,
                  2.40, 2.39, 2.81, 3.44, 2.05, 2.33, 3.98, 2.56, 3.14, 2.85,
                  3.11, 2.93, 3.43, 2.38, 2.42, 2.49, 3.25, 1.19, 2.90, 3.10,
                  2.60, 2.73, 2.65, 3.52, 3.15, 3.55, 2.14, 3.01, 3.39, 3.38,
                  3.03, 1.08, 0.72, 1.26, 1.90, 2.37, 2.00, 3.29, 2.78, 3.12,
                  2.03, 2.90, 2.08, 1.85, 2.36, 2.42, 3.66, 3.33, 2.03, 3.96,
                  3.50, 2.78, 3.82, 2.34, 0.90, 3.17, 2.89, 2.27, 3.16, 1.06,
                  2.82, 3.54, 3.19, 4.05, 3.22, 2.94, 3.48, 3.17, 2.84, 2.20,
                  1.26, 2.78, 3.38, 2.15, 2.25, 1.31, 2.55, 2.13, 2.50, 2.28,
                  2.84, 1.93, 0.68, 3.64, 2.49, 2.46, 2.79, 2.61, 1.54, 2.49])

# Параметры
epsilon = 0.1
n = len(sample)

# 1. Оценка среднего и дисперсии
X_bar = np.mean(sample)
S0_squared = np.var(sample, ddof=1)

# 2. Квантиль для t-распределения (для уровня 1 - epsilon / 2)
t_2 = stats.t.ppf(1 - epsilon / 2, n - 1)

# 3. Границы доверительного интервала для среднего
lower_bound_mean = X_bar - t_2 * (np.sqrt(S0_squared) / np.sqrt(n))
upper_bound_mean = X_bar + t_2 * (np.sqrt(S0_squared) / np.sqrt(n))

# 4. Квантиль для chi^2 распределения
c1 = stats.chi2.ppf(epsilon / 2, n - 1)
c2 = stats.chi2.ppf(1 - epsilon / 2, n - 1)

# 5. Границы доверительного интервала для дисперсии
lower_bound_variance = (n - 1) * S0_squared / c2
upper_bound_variance = (n - 1) * S0_squared / c1

# Результаты
print(f"Количество элементов выборки: {n}")
print(f"Среднее выборки: {X_bar:.4f}")
print(f"Оценка дисперсии: {S0_squared:.4f}")
print(f"Квантиль t распределения: {t_2:.4f}")
print(f"Квантиль хи распределения (e/2): {c1:.4f}")
print(f"Квантиль хи распределения (1-e/2): {c2:.4f}")
print(f"Доверительный интервал для среднего: ({lower_bound_mean:.4f}, {upper_bound_mean:.4f})")
print(f"Доверительный интервал для дисперсии: ({lower_bound_variance:.4f}, {upper_bound_variance:.4f})")
